#!/usr/bin/env bash

#setup
test -d /root/cptechs || mkdir /root/cptechs;
ticket="${PS1//[^0-9]/}";
if [ ! -z "$ticket" ]; then export ticket="$ticket"; mkdir /root/cptechs/"$ticket"; else >&2 printf "ticket not found in prompt\n"; fi

#colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"

#aliases

#functions
function cpbak () {
	for i in "$@"; do
		if [ -d "$i" ]; then
			epoch="$(date +%s)"
			tar -zcf /root/cptechs/"$ticket"/"${epoch}${i//\//_}".tar.gz "$i";
			{ printf "%s -> " "$i"; printf "/root/cptechs/%s/" "$ticket"; printf "%s" "$epoch"; printf "%s.tar.gz\n" "${i//\//_}"; } >&2;
		elif [ -f "$i" ]; then
			cp -av "$i" /root/cptechs/"$ticket"/"$(date +%s)${i//\//_}";
		fi;
	done;
}

function cplistips () {
	test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
	/usr/local/cpanel/bin/whmapi1 listips|grep -oP "(?<=public_ip: )[^ ]+";
}

function cphostname () {
	test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
	/usr/local/cpanel/bin/whmapi1 gethostname|grep -oP "(?<=hostname: )[^ ]+";
}

function cpns () {
	test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
	/usr/local/cpanel/bin/whmapi1 get_nameserver_config|grep -oP "(?<= - )[^ ]+";
}

function exicwd () {
	if [ "$1" == "-a" ]; then
		zgrep -hoP "(?<=cwd=)/[^ ]+" /var/log/exim_mainlog*|sort|uniq -c|sort -nr;
	else
		grep -hoP "(?<=cwd=)/[^ ]+" /var/log/exim_mainlog|sort|uniq -c|sort -nr;
	fi
}

function exilogins () {
	if [ "$1" == "-a" ]; then
		zgrep -ho "A=\(.*\)\(@\|+\)\(.*\) S=" /var/log/exim_mainlog*|sed 's/ S\=//g'|sed 's/A\=\(.*\)\://g'|sed '/\(.*\)P=\(.*\)/d'|sort|uniq -c|sort -nr;
	else
		grep -ho "A=\(.*\)\(@\|+\)\(.*\) S=" /var/log/exim_mainlog|sed 's/ S\=//g'|sed 's/A\=\(.*\)\://g'|sed '/\(.*\)P=\(.*\)/d'|sort|uniq -c|sort -nr;
	fi;
}

function vhostphp () {
	test -f /usr/local/cpanel/bin/whmapi1||{ >&2 printf "whmapi1 not found\n"; return; };
	test -f /etc/cpanel/ea4/is_ea4||{ >&2 printf "Not EA4\n"; return; };
	if [ "$#" -eq 0 ]; then
		/usr/local/cpanel/bin/whmapi1 php_get_vhost_versions|awk '/ +vhost:/{print $2,ver} {ver=$2}';
	else
		vhosts="$@";
		/usr/local/cpanel/bin/whmapi1 php_get_vhost_versions|awk '/ +vhost:/{print $2,ver} {ver=$2}'|grep -E "${vhosts// /|}";
	fi;
}

function cpdns () {
	for i in "$@"; do
		>&2 printf "%s:\n" "$i";
		/usr/local/cpanel/3rdparty/perl/*/bin/perl -mCpanel::DnsRoots -e 'use Data::Dumper; print Dumper(Cpanel::DnsRoots->new()->get_ipv4_addresses_for_domain("@ARGV"));' "$i"|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b";
	done;
}

function cpfpm () {
	for i in /opt/cpanel/ea-php*; do
		find "$i" -path \*fpm.d\*.conf|\
		while read j; do
			d="$(basename $j)";
			printf "%s: " "${i##*/}"; printf "%s\n" "${d%.*}";
		done;
	done;
}

function ipinfo () {
        for i in "$@"; do
                curl -s ipinfo.io/"$i"|sed -E '/^[{}]/d; s/([,"]*|^[ ]+)//g';
        done;
}

function hosted () {
        for i in "$@"; do
                ips=($(dig A "$i" +short @8.8.8.8|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"));
		[ "${#ips[@]}" -eq 0 ] && {
		>&2 printf "%b" "$COL_YELLOW";
		>&2 printf "%s doesn't resolve\n" "$i";
		>&2 printf "%b" "$COL_RESET";
		return 2; };
                for ip in "${ips[@]}"; do
                        org="$(ipinfo $ip|awk '/^org: /{print$3}')";
                        [[ "$org" =~ Cloudflare ]] && {
			>&2 printf "%b" "$COL_YELLOW";
			>&2 printf "%s is behind Cloudflare\n" "$i";
			>&2 printf "%b" "$COL_RESET";
			return 2; };
                        cplistips|grep -q "$ip";
			if [ "$?" -eq 0 ]; then
				>&2 printf "%b" "$COL_GREEN";
				>&2 printf "%s points to this server\n" "$i";
				>&2 printf "%b" "$COL_RESET";
				return 0;
			else
				>&2 printf "%b" "$COL_RED";
				>&2 printf "%s doesn't point to this server\n" "$i";
				>&2 printf "%b" "$COL_RESET";
				return 1;
			fi;
                done;
        done;
}

function cpssl () {
	_vendor="$(python -m json.tool /var/cpanel/autossl.json|grep -oP '(?<="provider": ")[^"]+')";
	_domains=($(python -m json.tool < /var/cpanel/autossl_queue_cpanel.json|grep -oP '(?<=").+\..+(?=")'));
	_orders=($(python -m json.tool < /var/cpanel/autossl_queue_cpanel.json|grep -oP '(?<="order_item_id": ")[^"]+'));
	_request=($(python -m json.tool < /var/cpanel/autossl_queue_cpanel.json|grep -oP '(?<="request_time": ")[^"]+'));
	_ips=($(/usr/local/cpanel/bin/whmapi1 listips|grep -oP '(?<=public_ip: )[^ ]+'));
	function _resolve () {
		_alias="$1";
		_resolv=($(dig A "$_alias${_domains[$i]}" +short @8.8.8.8|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"));
		if [ "${#_resolv[@]}" -eq 0 ]; then
			printf "%b" "$COL_RED";
			printf "(does not resolve): ";
			printf "%b" "$COL_RESET";
		else
			_local_ip='0';
			for _ip in "${_resolv[@]}"; do
				if [[ "${_ips[@]}" =~ "$_ip" ]]; then
					_local_ip='1';
					printf "%b" "$COL_GREEN";
					printf "(local %s): " "$_ip";
					printf "%b" "$COL_RESET";
					break;
				fi;
			done;
			if [ "${_local_ip:=null}" == null ]; then
				printf "%b" "$COL_RED";
				printf "(remote %s): " "$_ip";
				printf "%b" "$COL_RESET";
			fi;
		fi;
		unset _resolv _alias;
	}
	function _httpd_code () {
		_code="$1";
		if [ "$_code" -eq 200 ]; then
			printf "%b" "$COL_GREEN"; printf "%s OK\n" "${_code#* }"; printf "%b" "$COL_RESET";
			return 0;
		elif [ "$_code" -eq 301 ]||[ "$_code" -eq 302 ]; then
			printf "%b" "$COL_YELLOW"; printf "%s Moved\n" "${_code#* }"; printf "%b" "$COL_RESET";
			return 1;
		elif [ "$_code" -eq 403 ]; then
			printf "%b" "$COL_RED";	printf "%s Forbidden\n" "${_code#* }"; printf "%b" "$COL_RESET";
			return 1;
		elif [ "$_code" -eq 404 ]; then
			printf "%b" "$COL_RED";	printf "%s Not Found\n" "${_code#* }"; printf "%b" "$COL_RESET";
			return 1;
		elif [ "${_code:=null}" == null ]; then
			printf "%b" "$COL_RED";	printf "empty response\n"; printf "%b" "$COL_RESET";
			return 1;
		else
			printf "%b" "$COL_RED";	printf "%s\n" "${_code#* }"; printf "%b" "$COL_RESET";
			return 1;
		fi;
		unset _code;
	}
	function _expire () {
		_date="$@";
		_reqepoch="$(date -u -d "$_date" +%s)";
		_curepoch="$(date -u +%s)";
		_expepoch="$((_reqepoch+604800))";
		_count="$((_expepoch-_curepoch))";
		_count_day="$((_count/3600/24))";
		_count_hr="$((_count/3600%24))";
		if [ "$_count" -lt 0 ]; then
			
			d+=("${_domains[$i]}::${_orders[$i]}");
			printf "%bExpired on " "$COL_RED";
			printf "%s\n" "$(date -u -d @$_expepoch)";
			printf "%b" "$COL_RESET";
		elif [ "$_count" -lt 172800 ]; then
			printf "Expires in:%b " "$COL_YELLOW";
			printf "%s days " "$_count_day"; printf "%s hrs...\n" "$_count_hr";
			printf "%b" "$COL_RESET";
		else
			printf "Expires in:%b " "$COL_GREEN";
			printf "%s days " "$_count_day"; printf "%s hrs...\n" "$_count_hr";
			printf "%b" "$COL_RESET";
		fi;
		unset _date _reqepoch _curepoch _expepoch _count _count_day _count_hr;
	}
	if [[ "$_vendor" =~ cPanel ]]; then _agent='COMODO DCV'; else _agent='letsencrypt';fi;
	for ((i=0; i<${#_domains[@]}; i++)); do
		printf -- "--------------------\nchecking %s, " "${_domains[$i]}";
		printf "order: %s, " "${_orders[$i]}";
		_expire "${_request[$i]//[^0-9:-]/ }";
		_doc="$(grep -oP '(?<=^documentroot: )[^ ]+' /var/cpanel/userdata/*/${_domains[$i]} 2>/dev/null)";
		if [ "${_doc:=null}" == null ]; then
			printf "%b" "$COL_RED"; printf "Domain missing in userdata, removed?\n"; printf "%b" "$COL_RESET";
		else
			_uri="$(find $_doc -maxdepth 1 -type f -regextype posix-extended -regex ".*[0-9A-Fa-f]{32}.txt" -printf '%T+ ' -exec basename '{}' \;|sort -r|awk 'NR==1{print$2}')";
			_pass='0';
			printf "%s/" "${_domains[$i]}";
			if [ "${_uri:=null}" == null ]; then
				_uri='abcdef0123456789ABCDEF0123456789.txt';
				printf "%b" "$COL_RED"; printf "DCV file not found: "; printf "%b" "$COL_RESET";
			else
				_pass="$((_pass+1))";
				printf "%s " "$_uri: ";
			fi;
			_resolve;
			_resp="$(curl -sI -A "$_agent" -o /dev/null -m 7 -w "%{http_code}" "${_domains[$i]}/$_uri")";
			_httpd_code "$_resp";
			if [ "$?" -eq 0 ]; then
				_pass="$((_pass+1))";
			fi;
			#### www checks start here
			printf "%s/" "www.${_domains[$i]}";
			if [ "$_uri" == abcdef0123456789ABCDEF0123456789.txt ]; then
				printf "%b" "$COL_RED"; printf "DCV file not found: "; printf "%b" "$COL_RESET";
			else
			        printf "%s: " "$_uri";
			fi;
			_resolve 'www.';
			_resp_www="$(curl -sI -A "$_agent" -o /dev/null -m 7 -w "%{http_code}" "www.${_domains[$i]}/$_uri")";
			_httpd_code "$_resp_www";
			if [ "$?" -eq 0 ]; then
				_pass="$((_pass+1))";
			fi;
			#### mail checks start here
			printf "%s/" "mail.${_domains[$i]}";
			if [ "$_uri" == abcdef0123456789ABCDEF0123456789.txt ]; then
				printf "%b" "$COL_RED"; printf "DCV file not found: "; printf "%b" "$COL_RESET";
			else
				printf "%s " "$_uri: ";
			fi;
			_resolve 'mail.';
			_resp_mail="$(curl -sI -A "$_agent" -o /dev/null -m 7 -w "%{http_code}" "mail.${_domains[$i]}/$_uri")";
			_httpd_code "$_resp_mail";
			if [ "$?" -eq 0 ]; then
				_pass="$((_pass+1))";
			fi;
			if [ -f "$_doc"/.htaccess ]; then
				printf "%s/.htaccess: iThemes:" "$_doc";
				grep -qi "Begin.*iThemes" "$_doc"/.htaccess;
				if [ "$?" -eq 0 ]; then
					printf "%b" "$COL_RED";	printf "Yes "; printf "%b" "$COL_RESET";
				else
					printf "%b" "$COL_GREEN"; printf "No "; printf "%b" "$COL_RESET";
				fi;
				printf "AllinOneWPSecurity:";
				grep -qi "BEGIN All In One WP Security" "$_doc"/.htaccess;
				if [ "$?" -eq 0 ]; then
					printf "%b" "$COL_RED";	printf "Yes\n"; printf "%b" "$COL_RESET";
				else
					printf "%b" "$COL_GREEN"; printf "No\n"; printf "%b" "$COL_RESET";
				fi;
				awk '/comodo/{print "Line:",NR,"\t",$0;exit}' "$_doc"/.htaccess;
			else
				printf "%s/.htaccess: No such file or directory\n" "$_doc";
			fi;
			if [ "$_pass" -eq 4 ]; then
				_ready+=("${_domains[$i]}::${_orders[$i]}");
			fi;
		fi;
	done;
	printf "\n# Domains ready to restart DCV check:\n######################################\n";
	for ((i=0; i<${#_ready[@]}; i++)); do
		printf "%s\n" "${_ready[$i]}"|sed 's/::/ /';
	done;
	printf "\n# Expired requests that need removal:\n######################################\n";
	for ((i=0; i<${#_expired[@]}; i++)); do
		printf "%s\n" "${_expired[$i]}"|sed 's/::/ /';
	done;
	unset _expired _ready;
	printf "\n";
}
