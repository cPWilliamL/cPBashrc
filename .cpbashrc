#!/usr/bin/env bash

#setup
test -d /root/cptechs || mkdir /root/cptechs;
ticket="${PS1//[^0-9]/}";
if [ ! -z "$ticket" ]; then export ticket="$ticket"; mkdir /root/cptechs/"$ticket"; else >&2 printf "ticket not found in prompt\n"; fi

#colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"0;34m"
COL_CYAN=$ESC_SEQ"0;36m"

#aliases
alias ll='\ls -lah --color=auto';
alias ssp='sh <(curl -s "https://raw.githubusercontent.com/CpanelInc/SSP/master/run")';
alias buggers="curl -sk https://ssp.cpanel.net/ssp | /usr/local/cpanel/3rdparty/bin/perl - --bugreport"
alias preinstallcheck="bash <(curl -sL 'https://go.cpanel.net/preinstallcheck')";
alias reboot="printf 'Sorry, cPanel Support is not permitted to reboot customers servers\n'";
alias shutdown="printf 'Sorry, cPanel Support is not permitted to reboot customers servers\n'";
alias yum='/bin/yum --assumeno';
alias ofac="grep -E '\.(ir|mm|cu|sd|sy):' /etc/userdomains";
alias abortssh="ps aux|awk '/[s]shd: unknown/{system(\"kill -6 \"\$2)}'";
alias mapip="ip addr|awk -F\"[ \t/]+\" '/global/{printf \"internal \"\$3\" - external \";system(\"wget -O - -q --tries=1 --timeout=10 --bind-address=\"\$3\" http://cpanel.net/myip || echo NO REPLY\")}'";
which vim >/dev/null 2>&1 && alias vless='vim -R --cmd "autocmd BufRead,BufNewFile *.strace set filetype=strace"';
[ -f /opt/cpanel/libcurl/bin/curl ] && alias eacurl='/opt/cpanel/libcurl/bin/curl';
if which eacurl >/dev/null 2>&1; then
        alias ttfb="eacurl -o /dev/null -sL -H 'Cache-Control: no-cache' -w 'Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n'";
else
        alias ttfb="curl -o /dev/null -sL -H 'Cache-Control: no-cache' -w 'Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n'";
fi;
[ -f /usr/local/cpanel/3rdparty/bin/sqlite3 ] && alias sqlite='/usr/local/cpanel/3rdparty/bin/sqlite3';
[ -f /usr/local/cpanel/3rdparty/perl/*/bin/ack ] && alias ack='/usr/local/cpanel/3rdparty/perl/*/bin/ack';
[ -f /usr/local/cpanel/3rdparty/bin/perl ] && { \
        alias cpperl='/usr/local/cpanel/3rdparty/bin/perl';
        alias acctinfo='/usr/local/cpanel/3rdparty/bin/perl <(curl -s "https://raw.githubusercontent.com/CpanelInc/tech-acctinfo/master/acctinfo")';
        alias chkservderrors='/usr/local/cpanel/3rdparty/bin/perl <(curl -s "https://raw.githubusercontent.com/cPanelTechs/TechScripts/master/chkservd_errors.pl")';
        alias cplice='/usr/local/cpanel/3rdparty/bin/perl <(curl -s "https://raw.githubusercontent.com/CpanelInc/tech-cp_license_troubleshooter/master/cplicensets")'; };
[ -f /usr/local/cpanel/3rdparty/bin/perl ] && [ -f /var/cpanel/eximstats_db.sqlite3 ] && \
        alias eximstatsvac="/usr/local/cpanel/3rdparty/bin/perl -MCpanel::EximStats::DB::Sqlite -e 'Cpanel::EximStats::DB::Sqlite->dbconnect()->do(\"VACUUM;\");'";
[ ! -f /etc/cpanel/ea4/is_ea4 ] && [ -f /usr/local/apache/bin/apachectl ] && \
        alias apachectl='/usr/local/apache/bin/apachectl';

#functions
function tweaksettings () {
  if [ "$#" -eq 0 ]; then
    local tweak val;
    awk -F'=' '/=/{print$1,$2}' /var/cpanel/cpanel.config | \
      while read tweak val; do
        printf "${COL_CYAN}Tweak:${COL_RESET} %s ${COL_CYAN}Value:${COL_RESET} %s\n" "$tweak" "$val";
        awk -F':' -v var="$tweak" '$1==var{f=1}/^$/{f=0}f && /label/{gsub(/\047/,"");$1="";print $0}f && /help/{gsub(/\047/,"");$1="";print $0}' /usr/local/cpanel/whostmgr/docroot/themes/x/tweaksettings/Main.yaml;
        printf '\n';
      done;
  elif [ "$#" -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]; then
    cat <<'EOF' >&2
Usage: tweaksettings [-p|--pager] [-t|--tweak] [-h|--help]
This function provides WHM name/description and current values
By default, all values are listed

  -h|--help          print help
  -t|--tweak $tweak  print for given tweak name
  -p|--pager         print all values to pager
EOF
  elif [ "$#" -eq 1 ] && [ "$1" == "-p" -o "$1" == "--pager" ]; then
      local tweak val;
      awk -F'=' '/=/{print$1,$2}' /var/cpanel/cpanel.config | \
      while read tweak val; do
        printf "${COL_CYAN}Tweak:${COL_RESET} %s ${COL_CYAN}Value:${COL_RESET} %s\n" "$tweak" "$val";
        awk -F':' -v var="$tweak" '$1==var{f=1}/^$/{f=0}f && /label/{gsub(/\047/,"");$1="";print $0}f && /help/{gsub(/\047/,"");$1="";print $0}' /usr/local/cpanel/whostmgr/docroot/themes/x/tweaksettings/Main.yaml;
        printf '\n';
      done | less -Ri;
  elif [ "$#" -ge 2 ] && [ "$1" == "-t" -o "$1" == "--tweak" ]; then
    local tweak arg argar i;
    for arg in $@; do
      argar+=($arg);
    done;
    for ((i=1; i<${#argar[@]}; i++)); do
      if grep -q "^${argar[$i]}:" /usr/local/cpanel/whostmgr/docroot/themes/x/tweaksettings/Main.yaml; then
        val="$(awk -F'=' -v var="${argar[$i]}" '$1==var{print$2}' /var/cpanel/cpanel.config)";
        printf "${COL_CYAN}Tweak:${COL_RESET} %s ${COL_CYAN}Value:${COL_RESET} %s\n" "${argar[i]}" "$val";
        awk -F':' -v var="${argar[$i]}" '$1==var{f=1}/^$/{f=0}f && /label/{gsub(/\047/,"");$1="";print $0}f && /help/{gsub(/\047/,"");$1="";printf $0"\n"}' /usr/local/cpanel/whostmgr/docroot/themes/x/tweaksettings/Main.yaml
      else
        printf "${COL_RED}Tweak not found:${COL_RESET} %s\n" "$i";
      fi;
    done;
  fi;
}

function upcp () {
  function halp () {
    cat <<'EOF' >&2
This function serves as a wrapper to `/scripts/upcp' to ensure `/etc/cpupdate.conf' is respected.
It also provides basic upcp/version infomration.

  -a    print all(current version/tier, available tier)
  -c    check for update
  -h    print this help
  -f    follow log with tail
  -r    check for running update
  -s    print update summary
  -S    printf update summary for major updates only
  -t    print public tiers
  -u    update cPanel respecting cpupdate.conf
  -v    print current cPanel version

EOF
  }
  function running () {
    if [ -e /usr/local/cpanel/upgrade_in_progress.txt ]; then
      printf "%b" "$COL_RED";
      printf "Found upcp touch file\n";
      printf "%b" "$COL_RESET";
      stat /usr/local/cpanel/upgrade_in_progress.txt;
    else
      printf "%b" "$COL_GREEN";
      printf "No upcp touch file\n";
      printf "%b" "$COL_RESET";
    fi;
    if [ -e /run/upcp.pid ]; then
      printf "%b" "$COL_RED";
      printf "Found upcp touch file\n";
      printf "%b" "$COL_RESET";
      stat /run/upcp.pid;
    else
      printf "%b" "$COL_GREEN";
      printf "No upcp touch file\n";
      printf "%b" "$COL_RESET";
    fi
    if ps aux|grep -q 'root.*cPanel.*Update.*[u]pcp'; then
      printf "%b" "$COL_RED";
      printf "Found upcp process:\n";
      printf "%b" "$COL_RESET";
      ps aux|grep 'root.*cPanel.*Update.*[u]pcp';
    else
      printf "%b" "$COL_GREEN";
      printf "No upcp process found\n";
      printf "%b" "$COL_RESET";
    fi;
  };
  OPTIND=1;
  while getopts "achrsStvuf" opt; do
    case "$opt" in
      a)
        awk -F'=' '/^CPANEL=/{tier=$2}/^RPMUP=/{rpm=$2}/^UPDATES=/{up=$2}END{print tier,rpm,up}' /etc/cpupdate.conf|while read -r tier rpm up; do
          printf "cPanel: %s\n" "$(cat /usr/local/cpanel/version)";
          printf "Tier: %s\n" "$tier";
          printf "cP updates: %s\n" "$up";
          printf "RPM updates: %s\n\n" "$rpm";
          printf "Public Tiers...\n";
          done;
          whmapi1 get_available_tiers|awk '/current:/{cur=$(NF-1)" "$NF}/edge:/{edg=$(NF-1)" "$NF}/release:/{rel=$(NF-1)" "$NF}/stable:/{stb=$(NF-1)" "$NF}END{printf stb"\n"rel"\n"cur"\n"edg"\n\n"}';
          running;
        ;;
      c)
        ver="$(cat /usr/local/cpanel/version)";
        tier="$(grep -oP '(?<=^CPANEL=).+' /etc/cpupdate.conf)";
        targ="$(whmapi1 get_available_tiers|grep -oP "(?<=$tier: ).+")";
        up="$(grep -oP '(?<=^UPDATES=).+' /etc/cpupdate.conf)";
        if [[ "$ver" == "$targ" ]]; then
          printf "%b" "$COL_GREEN";
          printf "cPanel is up-to-date!\n";
          printf "%b" "$COL_RESET";
          printf "Current version/tier: %s/%s\nTarget: %s\n" "$ver" "$tier" "$targ";
        else
          printf "%b" "$COL_RED";
          printf "Update Available!!\n";
          printf "%b" "$COL_RESET";
          printf "Current version/tier: %s/%s\nTarget: %s\n" "$ver" "$tier" "$targ";
        fi;
        ;;
      h)
        halp;
        ;;
      r)
        running;
        ;;
      s)
        awk '{if ($(NF-2)!=$NF)print}' /var/cpanel/updatelogs/summary.log;
        ;;
      S)
        awk -F'.' '{if ($2!=$5) print}' /var/cpanel/updatelogs/summary.log;
        ;;
      t)
        whmapi1 get_available_tiers|awk '/current:/{cur=$(NF-1)" "$NF}/edge:/{edg=$(NF-1)" "$NF}/release:/{rel=$(NF-1)" "$NF}/stable:/{stb=$(NF-1)" "$NF}END{printf stb"\n"rel"\n"cur"\n"edg"\n"}';
        ;;
      f)
        follow=1;
        ;;
      u)
        ver="$(cat /usr/local/cpanel/version)";
        tier="$(grep -oP '(?<=^CPANEL=).+' /etc/cpupdate.conf)";
        targ="$(whmapi1 get_available_tiers|grep -oP "(?<=$tier: ).+")";
        up="$(grep -oP '(?<=^UPDATES=).+' /etc/cpupdate.conf)";
        if [[ "$ver" == "$targ" ]]; then
          printf "Current version/tier: %s/%s\nTarget: %s\n" "$ver" "$tier" "$targ";
          if [[ "$follow" -eq 1 ]]; then
              /scripts/upcp --bg 2>&1|grep -oP '/var/cpanel/updatelogs/update\.[0-9]+\.log'|xargs tail -f;
            else
              /scripts/upcp --bg;
          fi;
        elif [[ "$up" == manual ]]; then
          printf "%b" "$COL_RED";
          printf "[WARN] Updates set to manual!!\n";
          printf "[WARN] Update will result in version change!!\n"
          printf "%b" "$COL_RESET";
          printf "Current version/tier: %s/%s\nTarget: %s\n" "$ver" "$tier" "$targ";
          printf "Are you sure you would like to continue?: [y/n]\n";
          read -r ans;
          if [[ "$ans" =~ [yY] ]]; then
            if [[ "$follow" -eq 1 ]]; then
              /scripts/upcp --bg 2>&1|grep -oP '/var/cpanel/updatelogs/update\.[0-9]+\.log'|xargs tail -f;
            else
              /scripts/upcp --bg;
            fi;
          else
            printf "Bailing out...\n";
          fi;
        else
          if [[ "$follow" -eq 1 ]]; then
            /scripts/upcp --bg 2>&1|grep -oP '/var/cpanel/updatelogs/update\.[0-9]+\.log'|xargs tail -f;
          else
            /scripts/upcp --bg;
          fi;
        fi;
        ;;
      v)
        cat /usr/local/cpanel/version;
        ;;
      \?)
        halp;
    esac;
  done;
  unset halp opt follow ver tier targ up ans OPTIND running;
}

function backuperrors () {
  for log in /usr/local/cpanel/logs/cpbackup/*; do
    printf -- "------------------------------\n%s:\n" "$log";
    while read err; do
      grep "$err" "$log";
    done <<EOF
Failed to back up account
Unable to get user id
Unable to load cPanel user data
You cannot copy the root user
pkgacct failed to copy daily backup
Could not use daily backup
Bailing out
The REMOTE_PASSWORD variable is missing
Unable to find domain name
Exiting with error code
Could not remove directory
Hook denied execution of pkgacct
Could not open
Could not chmod
Could not rename
failed to create the working dir
Unable to fork
Unable to waitpid
Unable to open
Failure dumping
Unable to read
does not appear to be valid XML
Could not create directory
mysqldump: Got error
mysqldump failed
Failed to generate backup metadata
EOF
  done;
  unset log err;
}

function genpass () {
  local pass;
  pass="$(openssl rand -base64 32)";
  printf "%s" "${pass//[\+=\/]/}";
};

function phpinfo () {
  if [[ "$#" -eq 0 ]]; then
    cwd="$(pwd)";
    if [[ "$cwd" =~ ^/home.?/.+ ]]; then
      _user="$(awk -F'/' '{print$3}' <<<"$cwd")";
      if [ ! -f "$cwd"/phpinfo.php ]; then
        printf 'Creating %s/phpinfo.php... ' "$cwd";
        printf '<?php phpinfo(); ?>\n' >> "$cwd"/phpinfo.php;
        printf "chown'ing... ";
        chown "$_user". "$cwd"/phpinfo.php;
        printf "Done: %s/phpinfo.php\n" "$cwd";
      else
        printf "%s/phpinfo.php already exists!\n" "$cwd";
        \ls -lah "$cwd"/phpinfo.php;
      fi;
    else
      printf "CWD doesn't appear valid: %s\n" "$cwd";
    fi;
    unset cwd _user;
  elif [[ "$#" -eq 1 ]]; then
    if [[ "$1" == -p ]]; then
      printf '<?php phpinfo(); ?>\n';
    fi;
  elif  [[ "$#" -gt 1 ]]; then
    if [[ "$1" == -d ]]; then
      local dom;
      for dom in "${@:2}"; do
        if [[ "$dom" =~ .+\..+ ]]; then
          doc="$(awk -F':' -v var=${dom} '$1==var{split($2,path,"=="); print path[5]}' /etc/userdatadomains)";
          _user="$(awk -F'[: =]' -v var="$dom" '$1==var{print$3}' /etc/userdatadomains)";
          if [[ ! "${doc:=null}" == null ]]; then
            if [ ! -f "$doc"/phpinfo.php ]; then
              printf 'Creating %s/phpinfo.php... ' "$doc";
              printf '<?php phpinfo(); ?>\n' >> "$doc"/phpinfo.php;
              printf "chown'ing... ";
              chown "$_user". "$doc"/phpinfo.php;
              printf "Done: %s/phpinfo.php\n" "$doc";
            else
              printf "%s/phpinfo.php already exists!\n" "$doc";
              \ls -lah "$doc"/phpinfo.php;
            fi;
          else
            printf "Couldn't find %s in /etc/userdatadomains\n" "$dom";
          fi
        else
          printf "%s is not a valid domain\n" "$dom";
        fi;
      done;
    fi;
  else
    printf "Unrecognized arg\n";
  fi;
};

function lst () {
  if [[ "$#" -eq 0 ]]; then
    local cwd;
    cwd="$(pwd)";
    for each in ${cwd//\// }; do
      full+="/$each";
      \stat -c '%a %U:%G(%u:%g) %F %n' "$full";
    done;
    unset full each;
  fi;
  local i;
  for i in "$@"; do
    for each in ${i//\// }; do
      full+="/$each";
        \stat -c '%a %U:%G(%u:%g) %F %n' "$full";
        if [[ -f "$full" ]]; then
        sym="$(readlink -q ${full})";
        if [[ "${sym:=null}" == null ]]; then
          \lsattr "$full";
        else
          \lsattr "$sym";
        fi;
        unset sym;
      fi;
    done;
    printf "\n";
    unset full each;
  done;
};

function cpbak () {
  function _halp() {
    printf "Usage: cpbak [-bdhr] file\nIf no option is provided the default option is to backup\n\n";
    printf "  -b\tbackup file(s)\n";
    printf "  -d\tdiff file from backup\n";
    printf "  -h\tprint help\n";
    printf "  -r\trestore file from backup\n\n";
  };
  if [[ "$#" -eq 0 ]]; then
    _halp; 
  elif [[ "$@" =~ ^-[bdhr]{2} ]]; then
    printf "Multipe flags not supported!\n";
  elif [[ "$@" =~ ^-b ]] || ! [[ "$@" =~ ^-[bdhr] ]]; then
    local a i _list;
    for a in "$@"; do
      _list+=($a);
    done;
    for ((i=0; i<${#_list[@]}; i++)); do
      [[ "${_list[$i]}" =~ ^-b ]] && shift;
      if [ -d "${_list[$i]}" ]; then
        epoch="$(date +%s)"
        tar -zcf /root/cptechs/"$ticket"/"${epoch}${_list[$i]//\//_}".tar.gz "${_list[$i]}";
        { printf "%s -> " "${_list[$i]}"; printf "/root/cptechs/%s/" "$ticket"; printf "%s" "$epoch"; printf "%s.tar.gz\n" "${_list[$i]//\//_}"; } >&2;
      elif [ -f "${_list[$i]}" ]; then
        \cp -av "${_list[$i]}" /root/cptechs/"$ticket"/"$(date +%s)${_list[$i]//\//_}";
      fi;
    done;
  elif [[ "$@" =~ ^-d ]] && [[ "$#" -ge 2 ]]; then
    local _files _list _ans i e a;
    for a in "$@";do
      _list+=($a);
    done;
    for ((i=1; i<${#_list[@]}; i++)); do 
      if [[ -f "${_list[$i]}" ]]; then
        _files+=($(find /root/cptechs/${ticket} -regextype posix-extended -regex ".*/1[0-9]{7,}${_list[$i]//\//_}"));
        if [[ "${#_files[@]}" -eq 0 ]]; then
          printf "No backups found for %s\n" "${_list[$i]}";
        elif [[ "${#_files[@]}" -gt 5 ]]; then
          printf "Too many backup files found for %s\n" "${_list[$i]}";
        else
          for ((e=0; e<${#_files[@]}; e++)); do
            printf "%s) " "$e"; printf "%s\n" "${_files[$e]}";
          done;
          printf "\nPlease select a backup: ";
          read _ans;
          printf "\n";
          diff -u "${_files[$_ans]}" "${_list[$i]}";
          printf "\n";
        fi;
        unset _files;
      else
        printf "Sorry, you can't diff direcotry backups: %s\n" "${_list[$i]}";
      fi;
    done;
  elif [[ "$@" =~ ^-h ]]; then
    _halp;
  elif [[ "$@" =~ ^-r ]] && [[ "$#" -ge 2 ]]; then
    local _files _list _ans i e a;
    for a in "$@";do
      _list+=($a);
    done;
    for ((i=1; i<${#_list[@]}; i++)); do
      if [[ -f "${_list[$i]}" ]]; then
        _files+=($(find /root/cptechs/"${ticket}" -regextype posix-extended -regex ".*/1[0-9]{7,}${_list[$i]//\//_}"));
        if [[ "${#_files[@]}" -eq 0 ]]; then
          printf "No backups found for %s\n" "${_list[$i]}";
        elif [[ "${#_files[@]}" -gt 5 ]]; then
          printf "Too many backup files found for %s\n" "${_list[$i]}";
        else
          printf "Current: %s\n" "${_list[$i]}";
          for ((e=0; e<${#_files[@]}; e++)); do
            printf "%s) " "$e"; printf "%s\n" "${_files[$e]}";
          done;
          printf "\nPlease select a backup: ";
          read _ans;
          if [[ -f "${_files[$_ans]}" ]]; then
            printf "Overwriting %s " "${_list[$i]}"; printf "with %s\n" "${_files[$_ans]}";
            cat "${_files[$_ans]}" > "${_list[$i]}";
          else
            printf "Invalid option! %s\n" "${_files[$_ans]}";
          fi;
        fi;
        unset _files;
      else
        printf "Sorry, directories are not supported for restoration: %s\n" "${_list[$i]}";
      fi;
    done;
  fi;
  unset _halp _files _list _ans i e a;
};

function cplistips () {
  test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
  /usr/local/cpanel/bin/whmapi1 listips|grep -oP "(?<=public_ip: )[0-9\.]+";
};

function cphostname () {
  test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
  /usr/local/cpanel/bin/whmapi1 gethostname|grep -oP "(?<=hostname: )[^ ]+";
};

function cpns () {
  test -f /usr/local/cpanel/bin/whmapi1 || { >&2 printf "whmapi1 not found\n"; return; };
  /usr/local/cpanel/bin/whmapi1 get_nameserver_config|grep -oP "(?<= - )[^ ]+";
};

function exicwd () {
  if [ "$1" == "-a" ]; then
    zgrep -hoP "(?<=cwd=)/[^ ]+" /var/log/exim_mainlog*|sort|uniq -c|sort -nr;
  else
    grep -hoP "(?<=cwd=)/[^ ]+" /var/log/exim_mainlog|sort|uniq -c|sort -nr;
  fi;
};

function exilogins () {
  if [ "$1" == "-a" ]; then
    zgrep -ho "A=\(.*\)\(@\|+\)\(.*\) S=" /var/log/exim_mainlog*|sed 's/ S\=//g'|sed 's/A\=\(.*\)\://g'|sed '/\(.*\)P=\(.*\)/d'|sort|uniq -c|sort -nr;
  else
    grep -ho "A=\(.*\)\(@\|+\)\(.*\) S=" /var/log/exim_mainlog|sed 's/ S\=//g'|sed 's/A\=\(.*\)\://g'|sed '/\(.*\)P=\(.*\)/d'|sort|uniq -c|sort -nr;
  fi;
};

function vhostphp () {
  test -f /usr/local/cpanel/bin/whmapi1||{ >&2 printf "whmapi1 not found\n"; return; };
  test -f /etc/cpanel/ea4/is_ea4||{ >&2 printf "Not EA4\n"; return; };
  if [ "$#" -eq 0 ]; then
    /usr/local/cpanel/bin/whmapi1 php_get_vhost_versions|awk '/ +vhost:/{print $2,ver} {ver=$2}';
  else
    vhosts="$@";
    /usr/local/cpanel/bin/whmapi1 php_get_vhost_versions|awk '/ +vhost:/{print $2,ver} {ver=$2}'|grep -E "${vhosts// /|}";
  fi;
};

function cpdns () {
  local i;
  for i in "$@"; do
    >&2 printf "%s:\n" "$i";
    /usr/local/cpanel/3rdparty/perl/*/bin/perl -mCpanel::DnsRoots -e 'use Data::Dumper; print Dumper(Cpanel::DnsRoots->new()->get_ipv4_addresses_for_domain("@ARGV"));' "$i"|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b";
  done;
};

function cpfpm () {
  local i;
  local j;
  local d;
  for i in /opt/cpanel/ea-php*; do
    find "$i" -path \*fpm.d\*.conf|\
    while read j; do
      d="$(basename $j)";
      printf "%s: " "${i##*/}"; printf "%s\n" "${d%.*}";
    done;
  done;
};

function ipinfo () {
  local i;
  for i in "$@"; do
    curl -s ipinfo.io/"$i"|sed -r '/^[{}]/d; s/([,"]*|^[ ]+)//g';
  done;
};

function hosted () {
  local i;
  local ip;
  for i in "$@"; do
    ips=($(dig A "$i" +short @8.8.8.8|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"));
    [ "${#ips[@]}" -eq 0 ] && {
    >&2 printf "%b" "$COL_YELLOW";
    >&2 printf "%s doesn't resolve\n" "$i";
    >&2 printf "%b" "$COL_RESET";
    return 2; };
    for ip in "${ips[@]}"; do
      org="$(ipinfo $ip|awk '/^org: /{print$3}')";
      [[ "$org" =~ Cloudflare ]] && {
      >&2 printf "%b" "$COL_YELLOW";
      >&2 printf "%s is behind Cloudflare\n" "$i";
      >&2 printf "%b" "$COL_RESET";
      return 2; };
      cplistips|grep -q "$ip";
      if [ "$?" -eq 0 ]; then
        >&2 printf "%b" "$COL_GREEN";
        >&2 printf "%s points to this server\n" "$i";
        >&2 printf "%b" "$COL_RESET";
        return 0;
      else
        >&2 printf "%b" "$COL_RED";
        >&2 printf "%s doesn't point to this server\n" "$i";
        >&2 printf "%b" "$COL_RESET";
        return 1;
      fi;
    done;
  done;
};
